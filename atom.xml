<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zengkuner</title>
  
  <subtitle>好记性不如烂笔头！</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-09-21T14:54:16.569Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>zengkuner</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>react+typescript 高仿ant design 开发UI组件库</title>
    <link href="http://example.com/2021/09/16/react/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB%E7%9B%B8%E5%85%B3/"/>
    <id>http://example.com/2021/09/16/react/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB%E7%9B%B8%E5%85%B3/</id>
    <published>2021-09-15T16:00:00.000Z</published>
    <updated>2021-09-21T14:54:16.569Z</updated>
    
    <content type="html"><![CDATA[<h2 id="react-typescript-高仿ant-design-开发UI组件库"><a href="#react-typescript-高仿ant-design-开发UI组件库" class="headerlink" title="react+typescript 高仿ant design 开发UI组件库"></a>react+typescript 高仿ant design 开发UI组件库</h2><hr><h3 id="安装sass"><a href="#安装sass" class="headerlink" title="安装sass"></a>安装sass</h3><ol><li>Sass 是一款强化 CSS 的辅助工具，是一种css的预编译语言，它在 CSS 语法的基础上增加了变量 (variables)、嵌套 (nested rules)、混合 (mixins)、导入 (inline imports) 等高级功能。Sass 能够帮助复杂的样式表更有条理， 并且易于在项目内部或跨项目共享设计。</li><li>通过<code>npm install -g sass</code>安装到项目里，编译运行的时候会报错：<code>Cannot find module &#39;sass&#39;</code>。</li><li>解决办法：使用dart-sass。</li><li>安装命令：<code>npm install node-sass@npm:dart-sass</code></li><li>全局的一些变量、依赖、可重用性、扩展性。</li><li>varibles.scss(各种变量以及可配置设置) mixins.scss(全局mixins) function.scss(全局 functions)。</li><li>creat-react-app天生不支持sass预处理器的，需要安装依赖：<code>npm install node-sass --save</code>。</li><li>变量使用$ ：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$blue: #0d6efd !default;</span><br><span class="line">$primary: $blue !default;</span><br></pre></td></tr></table></figure></li><li>在添加样式到应用中，在不同浏览器下，有些元素缺少一致性，比如margin、padding等属性的默认值不太统一。</li><li>解决方法：安装normalize.css，其作用就是一般化大部分浏览器的默认样式。</li><li>插入文件：@import命令插入外部文件 .scss和css都可。</li><li>刚刚启动项目时又遇到了一个问题，babel-loader版本不匹配：create-react-app创建项目的时候所用到的babel-loader依赖是8.1.0版本的，但是在我所创建项目的node-modules下的版本是8.2.2的版本，所以我要把版本降级才可以启动项目。</li><li>解决方案：直接安装babel-loader的8.1.0版本，安装命令：<code>npm install babel-loader@8.1.0</code>.</li></ol><hr><h3 id="button组件需求分析"><a href="#button组件需求分析" class="headerlink" title="button组件需求分析"></a>button组件需求分析</h3><ol><li>type：不同类型的button，比如primary、default、danger、link button(链接按钮)</li><li>size：不同的尺寸的button，比如normal、small、large</li><li>禁用状态：disabled</li><li>如何支持按钮的原生api，比如链接的href属性，children(按钮文字)等。</li><li>给btn添加不同的className，假如是默认的就是btn，给不同的type和size添加不同的className，手动拼接很多的className会很麻烦，这里采用一个非常流行的小工具：classnames。</li><li>安装命令：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install classnames --save</span><br><span class="line">npm install @types/classnames --save</span><br></pre></td></tr></table></figure></li><li>button不同的size就是padding、border、radius不一样，实质上就是修改这几个属性而已，此时代码重用就可以用上sass的mixin，</li><li>sass的内置函数，比如：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">link-color: $primary !default;</span><br><span class="line">$link-hover-color: darken($link-color, 15%) !default // 基于$link-color变暗15%</span><br></pre></td></tr></table></figure></li></ol><hr><h3 id="测试工具-testing-library"><a href="#测试工具-testing-library" class="headerlink" title="测试工具 testing-library"></a>测试工具 testing-library</h3><ol><li>安装：<code>npm install --save-dev @testing-library/react</code>.</li><li>运行命令：<code>npm run test</code>.</li><li>安装jest-dom工具：<code>npm install --save-dev @test-library/jest-dom</code>.(最新版本会自带，不用安装)</li></ol><hr><h3 id="menu组件"><a href="#menu组件" class="headerlink" title="menu组件"></a>menu组件</h3><ol><li>React.Children提供了用于处理this.props.children不透明数据结构的实用方法，如果Children为不合规则的数据类型，map会完美的跳过这些类型，避免出现错误。</li><li>displayName为react内置属性</li><li>cloneElement()</li></ol><h4 id="父组件使用useContext向子组件传递数据-常用于【祖组件】与【后代组件】间通信"><a href="#父组件使用useContext向子组件传递数据-常用于【祖组件】与【后代组件】间通信" class="headerlink" title="父组件使用useContext向子组件传递数据-常用于【祖组件】与【后代组件】间通信"></a>父组件使用useContext向子组件传递数据-常用于【祖组件】与【后代组件】间通信</h4><ol><li>父组件中 <code>menu.tsx</code><ul><li>引入<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState, createContext &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br></pre></td></tr></table></figure></li><li>声明要传递参数的类型<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ts字符串字面量</span></span><br><span class="line"><span class="keyword">type</span> selectCallback = <span class="function">(<span class="params">selectedIndex: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">void</span></span><br><span class="line"><span class="keyword">interface</span> IMenuContext &#123;</span><br><span class="line">  <span class="attr">passedIndex</span>: <span class="built_in">number</span>;</span><br><span class="line">  passedOnSelect?: selectCallback;</span><br><span class="line">  mode?: MenuMode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>给要传过去的参数赋值(放在一个对象里面)<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 要传给子组件的数据</span></span><br><span class="line"><span class="keyword">const</span> passedContext: IMenuContext = &#123;</span><br><span class="line">  <span class="attr">passedIndex</span>: currentActive ? currentActive : <span class="number">0</span>,</span><br><span class="line">  <span class="attr">passedOnSelect</span>: handleClick,</span><br><span class="line">  <span class="attr">mode</span>: mode</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>使用<code>MenuContext.Provider</code>传值<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> (</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">className</span>=<span class="string">&#123;classes&#125;</span> <span class="attr">style</span>=<span class="string">&#123;style&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">MenuContext.Provider</span> <span class="attr">value</span>=<span class="string">&#123;passedContext&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      &#123;renderChildren()&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">MenuContext.Provider</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li>导出<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> MenuContext = createContext&lt;IMenuContext&gt;(&#123;<span class="attr">passedIndex</span>: <span class="number">0</span>&#125;)</span><br></pre></td></tr></table></figure></li></ul></li><li>子组件中 <code>menuItem.tsx</code><ul><li>引入<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; createContext, useContext &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; MenuContext &#125; <span class="keyword">from</span> <span class="string">&#x27;./menu&#x27;</span></span><br></pre></td></tr></table></figure></li><li>利用<code>useContext</code>取出并存入一个变量中<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> context = useContext(MenuContext)</span><br></pre></td></tr></table></figure></li><li>使用时用点号即可<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">context.passedIndex</span><br><span class="line">context.passedOnSelect(index)</span><br></pre></td></tr></table></figure></li></ul></li></ol><hr><h3 id="图标Icon"><a href="#图标Icon" class="headerlink" title="图标Icon"></a>图标Icon</h3><ol><li>安装react-fontawesome：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm i --save @fortawesome/fontawesome-svg-core</span><br><span class="line">npm i --save @fortawesome/free-solid-svg-icons</span><br><span class="line">npm i --save @fortawesome/react-fontawesome</span><br></pre></td></tr></table></figure></li></ol><hr><h3 id="storybook-本地调试组件和生成文档页面的利器"><a href="#storybook-本地调试组件和生成文档页面的利器" class="headerlink" title="storybook-本地调试组件和生成文档页面的利器"></a>storybook-本地调试组件和生成文档页面的利器</h3><ol><li>目前开发组件库痛点：展示和调试功能使用的是create-react-app入口文件(App.tsx)不适合管理组件库，并且缺少行为追踪和属性调试功能。</li><li>组件完美开发工具应有的特点：<ul><li>分开展示各个组件不同属性下的状态。</li><li>能追踪组件的行为并且具有属性调试功能。</li><li>可以为组件自动生成文档和属性列表。</li></ul></li><li>安装：<br><code>npx -p @storybook/cli sb init</code></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;react-typescript-高仿ant-design-开发UI组件库&quot;&gt;&lt;a href=&quot;#react-typescript-高仿ant-design-开发UI组件库&quot; class=&quot;headerlink&quot; title=&quot;react+typescript 高</summary>
      
    
    
    
    <category term="react" scheme="http://example.com/categories/react/"/>
    
    
    <category term="react" scheme="http://example.com/tags/react/"/>
    
    <category term="sass" scheme="http://example.com/tags/sass/"/>
    
  </entry>
  
  <entry>
    <title>vue父子组件通信</title>
    <link href="http://example.com/2021/09/06/vue/vue%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1/"/>
    <id>http://example.com/2021/09/06/vue/vue%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1/</id>
    <published>2021-09-06T06:08:30.000Z</published>
    <updated>2021-09-06T07:40:59.952Z</updated>
    
    <content type="html"><![CDATA[<h3 id="祖先传子通信方式"><a href="#祖先传子通信方式" class="headerlink" title="祖先传子通信方式"></a>祖先传子通信方式</h3><ol><li>父组件 APP.vue<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">todo-header</span> <span class="attr">ref</span>=<span class="string">&quot;header&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//在mounted生命周期里执行异步代码</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">//给&lt;TodoHeader/&gt;绑定addTodo事件监听</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">//this.$on(&#x27;addTodo&#x27;,this.addTodo) 此时第一个this指向APP实例，所以不对</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.$refs.header.$on(<span class="string">&quot;addTodo&quot;</span>, <span class="built_in">this</span>.addTodo); <span class="comment">//括号内为事件名和回调函数</span></span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">  &#125;;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>子组件 TodoHeader.vue 接收<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">addItem</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//触发自定义事件：addTodo</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.$emit(<span class="string">&quot;addTodo&quot;</span>, todo);</span></span><br><span class="line"><span class="javascript">      &#125;,</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">  &#125;;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="消息订阅与发布-—适用于各种组件间传值，以父子组件传值为例"><a href="#消息订阅与发布-—适用于各种组件间传值，以父子组件传值为例" class="headerlink" title="消息订阅与发布 —适用于各种组件间传值，以父子组件传值为例"></a>消息订阅与发布 —适用于各种组件间传值，以父子组件传值为例</h3><ol><li>下载 pubsub.js 库<ul><li>npm install —save-js 查看信息：npm info pubsub-js</li></ul></li><li>父组件 App.vue 订阅消息—绑定事件监听<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> PubSub <span class="keyword">from</span> <span class="string">&quot;pubsub-js&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">//订阅消息 参数为消息名和回调函数</span></span></span><br><span class="line"><span class="javascript">      PubSub.subscribe(<span class="string">&quot;deleteTodo&quot;</span>, <span class="function">(<span class="params">msg, index</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.deleteTodo(index);</span></span><br><span class="line"><span class="javascript">      &#125;);</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">  &#125;;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>子组件 TodoItem.vue 发布消息==触发事件<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> PubSub <span class="keyword">from</span> <span class="string">&#x27;pubsub=js&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">deleteItem</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> &#123;todo, index, deleteTodo&#125; = <span class="built_in">this</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">if</span>(<span class="built_in">window</span>.confirm(<span class="string">`确认删除<span class="subst">$&#123;todo.title&#125;</span>吗？`</span>)) &#123;</span></span><br><span class="line"><span class="javascript"><span class="comment">//发布消息 参数为消息名和要传递的数据</span></span></span><br><span class="line"><span class="javascript">PubSub.publish(<span class="string">&#x27;deleteTodo&#x27;</span>, index);</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="子传父的通信方式-emit"><a href="#子传父的通信方式-emit" class="headerlink" title="子传父的通信方式 $emit"></a>子传父的通信方式 $emit</h3><ol><li>这里以子组件直接给父组件传递自己 data 里的数据为例。</li><li>父组件 子组件标签名为 son-comp<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--通过事件绑定把这个方法传递给子组件--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">son-comp</span> @<span class="attr">func</span>=<span class="string">&quot;getMsgFromSon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">son-comp</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="javascript">  SonComp,</span></span><br><span class="line"><span class="javascript">  &#125;,</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="attr">msgFromSon</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript">  <span class="comment">/**定义一个接受子组件数据的方法，先把这个方法传给子组件，当子组件调用这个方法时，</span></span></span><br><span class="line"><span class="comment"><span class="javascript">   * 就可以通过参数data传递他自己想传给父组件的数据</span></span></span><br><span class="line"><span class="comment"><span class="javascript">   */</span></span></span><br><span class="line"><span class="javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">getMsgFromSon</span>(<span class="params">data</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="built_in">this</span>.msgFromSon = data;</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>子组件 SonComp.vue<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;向父组件传递消息&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;sendMsg&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">msg</span>: <span class="string">&quot;要传递给父组件的数据&quot;</span>,</span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">sendMsg</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.$emit(<span class="string">&quot;func&quot;</span>, <span class="built_in">this</span>.msg);</span></span><br><span class="line"><span class="javascript">      &#125;,</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">  &#125;;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;祖先传子通信方式&quot;&gt;&lt;a href=&quot;#祖先传子通信方式&quot; class=&quot;headerlink&quot; title=&quot;祖先传子通信方式&quot;&gt;&lt;/a&gt;祖先传子通信方式&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;父组件 APP.vue&lt;figure class=&quot;highlight html</summary>
      
    
    
    
    <category term="vue" scheme="http://example.com/categories/vue/"/>
    
    
    <category term="vue" scheme="http://example.com/tags/vue/"/>
    
    <category term="组件通信" scheme="http://example.com/tags/%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>react父子组件通信</title>
    <link href="http://example.com/2021/09/01/react/react%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1/"/>
    <id>http://example.com/2021/09/01/react/react%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1/</id>
    <published>2021-09-01T09:52:30.000Z</published>
    <updated>2021-09-06T06:13:51.773Z</updated>
    
    <content type="html"><![CDATA[<h2 id="react父子组件通信方式"><a href="#react父子组件通信方式" class="headerlink" title="react父子组件通信方式"></a>react父子组件通信方式</h2><h3 id="子组件向父组件传参"><a href="#子组件向父组件传参" class="headerlink" title="子组件向父组件传参"></a>子组件向父组件传参</h3><h4 id="场景一"><a href="#场景一" class="headerlink" title="场景一"></a>场景一</h4><ol><li>业务场景：父页面进行多选课程，并能选择分类，不同分类下展示相应的可选课程，点击请选择分类跳转至子页面进行分类级联选择。</li><li>交互功能：<ul><li>当子页面选择好想选的分类时，点击确定按钮将这个分类的唯一id及分类名称传递给父页面。另外，父页面收到分类id时需要将这个id作为请求接口函数的参数触发请求。</li><li>级联分类选择需要保存历史选择记录，例如假设一共有三层，选到第二层时，返回到父页面，此时再跳转到子页面时还要显示之前选择过的状态。</li><li>综上：子页面中，点击头部导航栏的返回按钮向父页面传递保留选择历史的level（树形结构的子集）；当点击确定按钮时，向父页面传递最后选中的分类名称和分类id，以及level（点击确定按钮后也会跳转到父页面，故也要把level传过去）。</li></ul></li><li>解决方案：<br> <strong>父页面中</strong><ul><li>假设父页面为AddMicrolecture.tsx，子页面为courseClassify.tsx，父页面的子组件标签为<code>&lt;CourseClassify/&gt;</code>。</li><li>首先在父页面定义两个函数，其中一个如下，第二个函数直接定义在子组件标签中。<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 接受两个参数，第一个参数data表示要接受的分类id，</span></span><br><span class="line"><span class="comment">// 第二个参数表示保存的历史选择数据，这两个参数都需要子组件传递过来.</span></span><br><span class="line"><span class="keyword">const</span> callBackFun = <span class="function">(<span class="params">data: <span class="built_in">any</span>, level: <span class="built_in">any</span>[]</span>) =&gt;</span> &#123;</span><br><span class="line">  setShowClassify(<span class="literal">false</span>); <span class="comment">// 子组件调用这个函数时跳转到父页面，设置为false</span></span><br><span class="line">  getData(<span class="string">&#x27;&#x27;</span>, <span class="literal">true</span>, <span class="number">1</span>, data);</span><br><span class="line">  setCategory(level) <span class="comment">// 保存这个level，再传给子组件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>把这个两个函数传递给子组件，由子组件调用执行。<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;CourseClassify</span><br><span class="line">  <span class="comment">// 参数data表示分类名称，需要子组件调用这个函数然后将参数传递过来</span></span><br><span class="line">  categoryName=&#123;<span class="function">(<span class="params">data: <span class="built_in">string</span></span>) =&gt;</span> &#123; setCategoryName(data); &#125;&#125;</span><br><span class="line">  callBackFun=&#123;<span class="function">(<span class="params">data?: <span class="built_in">string</span>, level?: <span class="built_in">any</span>[]</span>) =&gt;</span> callBackFun(data, level)&#125;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><strong>子页面中</strong></li><li>子组件中声明函数类型：<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> IProps &#123;</span><br><span class="line">  <span class="attr">categoryName</span>: <span class="function">(<span class="params">data: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">void</span></span><br><span class="line">  <span class="attr">callBackFun</span>: <span class="function">(<span class="params">data?: <span class="built_in">string</span>, level?: <span class="built_in">any</span>[]</span>) =&gt;</span> <span class="built_in">void</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>点击确定按钮调用confirm方法，在这个方法中调用父组件中传过来的两个函数。<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> confirm = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (isConfirm) &#123;</span><br><span class="line">    <span class="keyword">const</span> categoryId = level[level.length - <span class="number">1</span>].id;</span><br><span class="line">    <span class="keyword">const</span> categoryName = level[level.length - <span class="number">1</span>].name;</span><br><span class="line">    <span class="comment">// 调用父组件传过来的函数，并执行</span></span><br><span class="line">    props.categoryName(categoryName);</span><br><span class="line">    props.callBackFun(categoryId, level);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>点击导航栏返回按钮，只要把level传过去并执行父组件的callBackFun函数。<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Navbar title=<span class="string">&quot;请选择课程分类&quot;</span> onLeftClick=&#123;<span class="function">() =&gt;</span> props.callBackFun(<span class="string">&#x27;&#x27;</span>,level)&#125;&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="父组件向子组件传参"><a href="#父组件向子组件传参" class="headerlink" title="父组件向子组件传参"></a>父组件向子组件传参</h3><h4 id="场景一：传递简单数据。"><a href="#场景一：传递简单数据。" class="headerlink" title="场景一：传递简单数据。"></a>场景一：传递简单数据。</h4><ol><li>父页面中：把category传过去<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;CourseClassify</span><br><span class="line">  category=&#123;category&#125;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure></li><li>子页面中接收：<ul><li>首先在子组件中声明数据类型。<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> IProps &#123;</span><br><span class="line">  <span class="attr">category</span>: <span class="built_in">any</span>[]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>然后通过<code>props.category</code>使用。</li></ul></li></ol><h4 id="场景二：传递函数。"><a href="#场景二：传递函数。" class="headerlink" title="场景二：传递函数。"></a>场景二：传递函数。</h4><ol><li>业务说明：子页面进行添加或删除操作后，父组件要展示一条有修改信息的提醒。</li><li>解决方案：只需要在子组件的确认删除处和确认添加处做好标记，然后把标记传递给父组件。</li><li>父页面index.tsx，子组件标签为<code>&lt;MaterialList/&gt;</code><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [isDeleteIfo, setIsDeleteInfo] = useState(<span class="literal">false</span>) <span class="comment">// 为true时，即表示信息被修改。</span></span><br><span class="line"></span><br><span class="line">&lt;MaterialList</span><br><span class="line">  bookIsChange=&#123;<span class="function">() =&gt;</span> &#123; setIsDeleteInfo(<span class="literal">true</span>) &#125;&#125;</span><br><span class="line">  /&gt;</span><br></pre></td></tr></table></figure></li><li>子组件中：<ul><li>声明：<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> IProps &#123;</span><br><span class="line">  <span class="attr">bookIsChange</span>: <span class="built_in">any</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>确认删除：<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">delete</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  props.bookIsChange();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;react父子组件通信方式&quot;&gt;&lt;a href=&quot;#react父子组件通信方式&quot; class=&quot;headerlink&quot; title=&quot;react父子组件通信方式&quot;&gt;&lt;/a&gt;react父子组件通信方式&lt;/h2&gt;&lt;h3 id=&quot;子组件向父组件传参&quot;&gt;&lt;a href=&quot;#</summary>
      
    
    
    
    <category term="react" scheme="http://example.com/categories/react/"/>
    
    
    <category term="react" scheme="http://example.com/tags/react/"/>
    
    <category term="组件通信" scheme="http://example.com/tags/%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>函数和类型推断</title>
    <link href="http://example.com/2021/08/29/typescript/%E5%87%BD%E6%95%B0%E5%92%8C%E7%B1%BB%E5%9E%8B%E6%8E%A8%E6%96%AD/"/>
    <id>http://example.com/2021/08/29/typescript/%E5%87%BD%E6%95%B0%E5%92%8C%E7%B1%BB%E5%9E%8B%E6%8E%A8%E6%96%AD/</id>
    <published>2021-08-29T03:30:12.000Z</published>
    <updated>2021-08-31T11:56:36.256Z</updated>
    
    <content type="html"><![CDATA[<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="函数声明"><a href="#函数声明" class="headerlink" title="函数声明"></a>函数声明</h3><ol><li>定义一个有两个参数的函数，参数类型为number，返回值类型为number。<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>):  <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>将以上函数赋值给变量result，result会自动解析为number类型。<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> result = add(<span class="number">2</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure></li></ol><h3 id="函数的可选参数"><a href="#函数的可选参数" class="headerlink" title="函数的可选参数"></a>函数的可选参数</h3><ol><li>实现可选参数：在变量后加上一个?，表示该参数可选。<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span>, z?: <span class="built_in">number</span></span>):  <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> z === <span class="string">&#x27;number&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> x + y + z;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>正确示例：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> result = add(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">let</span> result = add(<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>);</span><br></pre></td></tr></table></figure></blockquote></li><li>可选参数之后不能再加上一个确定参数，可选参数只能放在最后面。  <blockquote><p>错误示例：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x: <span class="built_in">number</span>, z?: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>):  <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li><li>给函数参数添加默认值，ts会将已添加默认值的参数识别为可选参数。<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span>, z: <span class="built_in">number</span> = <span class="number">10</span></span>):  <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> z === <span class="string">&#x27;number&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> x + y + z;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="给函数声明类型"><a href="#给函数声明类型" class="headerlink" title="给函数声明类型"></a>给函数声明类型</h3><ol><li>函数表达式<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> add = <span class="function"><span class="keyword">function</span> (<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span>, z: <span class="built_in">number</span> = <span class="number">10</span></span>):  <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> z === <span class="string">&#x27;number&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> x + y + z;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>给函数声明类型，其后的箭头函数跟上一个类型，表示函数返回的类型。<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> add2: <span class="function">(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span>: z?: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span> = add</span><br></pre></td></tr></table></figure></li><li>假设函数返回为空，不返回。<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> add2: <span class="function">(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span>: z?: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">void</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="类型推断"><a href="#类型推断" class="headerlink" title="类型推断"></a>类型推断</h2><ol><li>假设将一个没有声明类型的变量赋值字符串，那么这个变量就是string类型。<br>示例：<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;str&#x27;</span>; <span class="comment">// 此时str已经为string类型了</span></span><br><span class="line">str = <span class="number">123</span>; <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;函数&quot;&gt;&lt;a href=&quot;#函数&quot; class=&quot;headerlink&quot; title=&quot;函数&quot;&gt;&lt;/a&gt;函数&lt;/h2&gt;&lt;h3 id=&quot;函数声明&quot;&gt;&lt;a href=&quot;#函数声明&quot; class=&quot;headerlink&quot; title=&quot;函数声明&quot;&gt;&lt;/a&gt;函数声明&lt;/h</summary>
      
    
    
    
    <category term="typescript" scheme="http://example.com/categories/typescript/"/>
    
    
    <category term="typescript" scheme="http://example.com/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>test-hexo</title>
    <link href="http://example.com/2021/08/01/test-hexo/"/>
    <id>http://example.com/2021/08/01/test-hexo/</id>
    <published>2021-07-31T20:12:21.000Z</published>
    <updated>2021-09-16T06:29:56.220Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2021/08/01/hello-world/"/>
    <id>http://example.com/2021/08/01/hello-world/</id>
    <published>2021-07-31T19:14:21.589Z</published>
    <updated>2021-08-29T02:57:01.379Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><blockquote><p>搭建博客的详细教程 <a href="https://www.zhihu.com/question/20962496/answer/1882882782?utm_campaign=shareopn&amp;utm_content=group3_Answer&amp;utm_medium=social&amp;utm_oi=813766955784876032&amp;utm_source=wechat_session&amp;s_r=0" title="手把手教">请戳</a></p></blockquote><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
