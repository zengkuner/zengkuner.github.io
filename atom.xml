<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zengkuner</title>
  
  <subtitle>八神太一</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-10-03T11:38:25.770Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>zengkuner</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>sort</title>
    <link href="http://example.com/2021/10/03/dataStructures/sort/"/>
    <id>http://example.com/2021/10/03/dataStructures/sort/</id>
    <published>2021-10-03T11:37:33.000Z</published>
    <updated>2021-10-03T11:38:25.770Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>graph</title>
    <link href="http://example.com/2021/10/03/dataStructures/graph/"/>
    <id>http://example.com/2021/10/03/dataStructures/graph/</id>
    <published>2021-10-03T11:36:31.000Z</published>
    <updated>2021-10-03T11:38:18.320Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>tree</title>
    <link href="http://example.com/2021/10/03/dataStructures/tree/"/>
    <id>http://example.com/2021/10/03/dataStructures/tree/</id>
    <published>2021-10-03T11:35:34.000Z</published>
    <updated>2021-10-03T11:38:11.896Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>string</title>
    <link href="http://example.com/2021/10/03/dataStructures/string/"/>
    <id>http://example.com/2021/10/03/dataStructures/string/</id>
    <published>2021-10-03T11:35:15.000Z</published>
    <updated>2021-10-03T11:38:04.547Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>stackAndQueue</title>
    <link href="http://example.com/2021/10/03/dataStructures/stackAndQueue/"/>
    <id>http://example.com/2021/10/03/dataStructures/stackAndQueue/</id>
    <published>2021-10-03T11:33:11.000Z</published>
    <updated>2021-10-03T11:37:59.548Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>linear-list</title>
    <link href="http://example.com/2021/10/03/dataStructures/linear-list/"/>
    <id>http://example.com/2021/10/03/dataStructures/linear-list/</id>
    <published>2021-10-03T11:31:31.000Z</published>
    <updated>2022-01-28T17:07:16.560Z</updated>
    
    <content type="html"><![CDATA[<h2 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h2><hr><h3 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h3><ol><li>定义：线性表的顺序存储称为顺序表，其特点是表中元素的逻辑顺序与物理顺序相同。假设线性表的元素类型为<code>ElemType</code>，线性表的顺序存储类型描述为：<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MaxSize 50  <span class="comment">//定义线性表的最大长度</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">  ElemType data[MaxSize];  <span class="comment">// 顺序表的元素</span></span><br><span class="line">  <span class="keyword">int</span> length;              <span class="comment">// 顺序表的当前长度 </span></span><br><span class="line">&#125; SqList;                   <span class="comment">// 顺序表的类型定义</span></span><br></pre></td></tr></table></figure><blockquote><p>线性表中元素的位序是从1开始的，而数组中元素的下标是从0开始的。</p></blockquote></li><li>插入操作：在顺序表L的第i（1 &lt;= i &lt;= L.length + 1）个位置插入新元素e。如果i的输入不合法，则返回false，表示插入失败；否则将顺序表的第i个元素以及其后的所有元素右移一个位置，腾出一个空位置插入新元素e，顺序表长度增加1，插入成功，返回true。<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ListInsert</span> <span class="params">(SqList &amp;L, <span class="keyword">int</span> i, ElemType e)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 本算法实现将元素e插入到顺序表L中第i个位置</span></span><br><span class="line">  <span class="keyword">if</span> (i &lt; <span class="number">1</span> || i &gt; L.length + <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">if</span> (L.length &gt;= MaxSize) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> j = L.length; j &gt;= i; j--) &#123;</span><br><span class="line">    L.data[j] = L.data[j - <span class="number">1</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  L.data[i - <span class="number">1</span>] = e;</span><br><span class="line">  L.length++;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>时间复杂度：</p><ol><li>最好情况：在表尾插入，<code>O(l)</code>。</li><li>最坏情况：在表头插入，<code>O(n)</code>。</li><li>平均情况：累加各位置的插入概率*相应的元素移动次数；假设P是在第i个位置插入结点的概率，n为表长，则P = 1/(n+1)，在任意位置插入的概率都相等，得出移动结点的平均次数为n/2，故时间复杂度为<code>O(n)</code>。</li></ol></blockquote></li><li>删除操作：删除顺序表L中第i(1 &lt;= i &lt;= L.length)个位置的元素，成功则返回true，并将被删除的元素用引用变量e返回，否则返回false。<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ListDelete</span> <span class="params">(SqList &amp;L, <span class="keyword">int</span> i, <span class="keyword">int</span> &amp;e)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 本算法实现删除顺序表L中第i个位置的元素</span></span><br><span class="line">  <span class="keyword">if</span> (i &lt; <span class="number">1</span> || i &gt; L.length) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="comment">// 将被删除的元素赋值给e</span></span><br><span class="line">  e = L.data[i - <span class="number">1</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; L.length; j++) &#123;</span><br><span class="line">    L.data[j - <span class="number">1</span>] = L.data[j];</span><br><span class="line">  &#125;</span><br><span class="line">  L.length--;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>算法时间复杂度：</p><ol><li>最好情况：删除表尾元素，无须移动元素，<code>O(l)</code>。</li><li>最坏情况：删除表头元素，<code>O(n)</code>。</li><li>平均情况：分析方法同上，移动结点的平均次数为(n-1)/2，<code>O(n)</code>。</li></ol></blockquote></li><li>按值查找（顺序查找）：在顺序表L中查找第一个元素值等于e的元素，并返回其位序。<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LocateElem</span> <span class="params">(SqList L, ElemType e)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 本算法实现查找顺序表中值为e的元素</span></span><br><span class="line">  <span class="keyword">int</span> i;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; L.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (L.data[i] == e) &#123;</span><br><span class="line">      <span class="keyword">return</span> i + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 退出循环，说明查找失败</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>算法时间复杂度：</p><ol><li>最好情况：查找元素在表头，<code>O(l)</code>。</li><li>最坏情况：查找元素在表尾，需要比较n次，<code>O(n)</code>。</li><li>平均情况：累加各位置的插入概率*相应的元素比较次数，得出其平均比较次数为(n+1)/2，<code>O(n)</code>。</li></ol></blockquote></li><li>从顺序表中删除具有最小值的元素（假设唯一）并由函数返回被删元素的值，空出的位置由最后一个元素填补，若顺序表为空则显示出错信息并退出运行。<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">DelMin</span> <span class="params">(SqList &amp;L, ElemType &amp;value)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 删除顺序表L中最小值元素结点，并通过引用型参数value返回其值</span></span><br><span class="line">  <span class="keyword">if</span> (L.length == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  value = L.data[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">int</span> pos = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; L.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (L.data[i] &lt; value) &#123;</span><br><span class="line">      value = L.data[i];</span><br><span class="line">      pos = i;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  L.data[pos] = L.data[L.length - <span class="number">1</span>];</span><br><span class="line">  L.length--;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>本题也可以用函数返回值返回，两者的区别是：函数返回值只能返回一个值，而参数返回（引用传参）则可以返回多个值。</p></blockquote></li><li>设计一个高效算法，将顺序表的所有元素<strong>逆置</strong>，要求算法的空间复杂度为<code>O(l)</code>。<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Reverse</span> <span class="params">(sqList &amp;L)</span> </span>&#123;</span><br><span class="line">  ElemType temp;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; L.length/<span class="number">2</span>; i++) &#123;</span><br><span class="line">    temp = L.data[i];</span><br><span class="line">    L.data[i] = L.data[L.length - i <span class="number">-1</span>];</span><br><span class="line">    L.data[L.length - i - <span class="number">1</span>] = temp;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>长度为n的顺序表L，编写一个时间复杂度为<code>O(n)</code>，空间复杂度为<code>O(l)</code>的算法，该算法删除线性表中所有值为<code>x</code>的数据元素。<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法一</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">del_x_1</span> <span class="params">(SqList &amp;L, ElemType x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; L.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (L.data[i] != x) &#123;</span><br><span class="line">      L.data[k] = L.data[i];</span><br><span class="line">      k++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  L.length = k;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法二</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">del_x_2</span> <span class="params">(SqList &amp;L, ElemType x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> k = <span class="number">0</span>, i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (i &lt; L.length) &#123;</span><br><span class="line">    <span class="keyword">if</span> (L.data[i] == x) &#123;</span><br><span class="line">      k++;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      L.data[i - k] = L.data[i];</span><br><span class="line">    &#125;</span><br><span class="line">    i++;</span><br><span class="line">  &#125;</span><br><span class="line">  L.length = L.length - k;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>从<strong>有序</strong>顺序表中删除其值在给定值<code>s</code>与<code>t</code>之间（要求<code>s &lt; t</code>）的所有元素，如果<code>s</code>或<code>t</code>不合理或者顺序表为空则显示出错信息并退出运行。<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Del_s_t1</span> <span class="params">(sqList &amp;L, ElemtType s, ElemType t)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 删除有序表L中值在给定值s与t之间的所有元素</span></span><br><span class="line">  <span class="keyword">int</span> i , j;</span><br><span class="line">  <span class="keyword">if</span> (s &gt;= t || L.length == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; L.length &amp;&amp; L.data[i] &lt; s; i++);</span><br><span class="line">  <span class="keyword">if</span> (i &gt;= L.length) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (j = i; j &lt; L.length &amp;&amp; L.data[j] &lt;= t; j++);</span><br><span class="line">  <span class="keyword">for</span> (; j &lt; L.length; i++,j++) &#123;</span><br><span class="line">    L.data[i] = L.data[j];</span><br><span class="line">  &#125;</span><br><span class="line">  L.length = i;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>从顺序表中删除其值在给定值<code>s</code>与<code>t</code>之间（包含<code>s</code>和<code>t</code>，要求<code>s &lt; t</code>）的所有元素，如果<code>s</code>或<code>t</code>不合理或者顺序表为空则显示出错信息并退出运行。<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Del_s_t1</span><span class="params">(sqList &amp;L, ElemType s, ElemType t)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 删除顺序表L中值在给定值s与t之间的所有元素</span></span><br><span class="line">  <span class="keyword">int</span> i, k = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (L.length == <span class="number">0</span> || s &gt;= t) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; L.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (L.data[i] &gt;= s &amp;&amp; L.data[i] &lt;= t) &#123;</span><br><span class="line">      k++;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      L.data[i - k] = L.data[i];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  L.length -= k;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>从<strong>有序</strong>顺序表中删除所有其值重复的元素，使表中所有元素的值均不同。<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Delete_Same</span> <span class="params">(SqList &amp;L)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (L.length == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">int</span> i, j;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>, j = <span class="number">1</span>; j &lt; L.length; j++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (L.data[i] != L.data[j]) &#123;</span><br><span class="line">      L.data[++i] = L.data[j];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  L.length = i + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>将两个<strong>有序</strong>顺序表合并成一个新的<strong>有序</strong>顺序表，并由函数返回结果顺序表。</li><li>已知在一维数组<code>A[m+n]</code>中依次存放着两个线性表<code>(a1,a2,a3,..., am)</code>和<code>(b1,b2,b3,...,bn)</code>。试编写一个函数，将数组中两个顺序表的位置互换，即将<code>(b1,b2,b3,...,bn)</code>放在<code>(a1,a2,a3,..., am)</code>的前面。</li><li>线性表<code>(a1,a2,a3,..., an)</code>中元素递增有序且按顺序存储于计算机内。要求设计一算法完成用最少时间在表中查找数值为<code>x</code>的元素，若找到将其与后继元素位置相交换，若找不到将其插入表中并使表中元素仍递增有序。  </li><li><strong>【2010】</strong>设将n(n&gt;1)个整数存放到一维数组R中。试设计一个在时间和空间两个方面都尽可能高效的算法。将R中保存的序列循环左移p(0 &lt; p &lt; n)个位置，即将R中的数据由<code>(X0, X1, ..., Xn-1)</code>变换为<code>(Xp, Xp+1, ..., Xn-1, X0, X1, ..., Xp-1)</code>。</li><li><strong>【2011】</strong>一个长度为L(L &gt;= 1)的升序序列S，处在第[L/2]（向上取整）个位置的数称为S的中位数。例如，若序列S1=(11, 13, 15, 17, 19)，则S1的中位数是15，两个序列的中位数是含它们所有元素的升序序列的中位数。例如，若S2 = (2, 4, 6, 8, 20)，则S1和S2的中位数是11。现在有两个等长升序序列A和B，试设计一个在时间和空间两个方面都尽可能高效的算法，找出两个序列A和B的中位数。</li><li><strong>【2013】</strong>已知一个整数序列A = (a0, a1, …, an-1)，其中0 &lt;= ai &lt; n(0 &lt;= i &lt; n)。若存在ap1 = ap2 = … = apm = x且m &gt; n/2(0 &lt;= pk &lt; n, 1 &lt;= k &lt;= m)，则称x为A的主元素。例如A = (0, 5, 5, 3, 5, 7, 5, 5)，则5为主元素；又如A = (0, 5, 5, 3, 5, 1, 5, 7)，则A中没有主元素。假设A中的n个元素保存在一个一维数组中，设计一个尽可能高效的算法，找出A的主元素。若存在主元素，则输出该元素；否则输出-1。</li></ol><hr><h3 id="单链表、双链表、循环单链表和循环双链表"><a href="#单链表、双链表、循环单链表和循环双链表" class="headerlink" title="单链表、双链表、循环单链表和循环双链表"></a>单链表、双链表、循环单链表和循环双链表</h3><hr><ol><li>定义：线性表的链式存储又称为单链表，链式存储线性表时，不需要使用地址连续的存储单元，即它不要求逻辑上相邻的两个元素在物理位置上也相邻，单链表结点结构如下：</li></ol><div class="table-container"><table><thead><tr><th style="text-align:center">data</th><th style="text-align:center">next</th></tr></thead><tbody><tr><td style="text-align:center">数据域</td><td style="text-align:center">指针域</td></tr></tbody></table></div><p>其中，data为数据域，存放数据元素；next为指针域，存放其后继结点的地址。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> &#123;</span></span><br><span class="line">  ElemType data;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; LNode, *LinkList;</span><br></pre></td></tr></table></figure></p><ol><li>头插法建立单链表。<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LinkList <span class="title">CreateList1</span><span class="params">(LinkList &amp;L)</span> </span>&#123;</span><br><span class="line">  LNode *s; <span class="keyword">int</span> x;</span><br><span class="line">  L = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">  L-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">  <span class="keyword">while</span> (x != <span class="number">9999</span>) &#123;</span><br><span class="line">    s = (LNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">    s-&gt;data = x;</span><br><span class="line">    <span class="comment">// 头插法核心语句</span></span><br><span class="line">    s-&gt;next = L-&gt;next;</span><br><span class="line">    L-&gt;next = s;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> L;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><blockquote><p>每个结点插入的时间为<code>O(l)</code>，设单链表长为n，则总的时间复杂度为<code>O(n)</code>。</p></blockquote></li><li>尾插法建立单链表，需要增加一个尾指针r，使其始终指向当前链表的尾结点。<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LinkList <span class="title">CreateList2</span> <span class="params">(LinkList &amp;L)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> x;</span><br><span class="line">  L = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">  LNode *s, *r = L;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">  <span class="keyword">while</span>(x != <span class="number">9999</span>) &#123;</span><br><span class="line">    s = (LNode)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">    s-&gt;data = x;</span><br><span class="line">    <span class="comment">// 尾插法关键语句</span></span><br><span class="line">    r-&gt;next = s;</span><br><span class="line">    r = s;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">  &#125;</span><br><span class="line">  r-&gt;next = <span class="literal">NULL</span>; <span class="comment">// 尾结点指针置空</span></span><br><span class="line">  <span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>时间复杂度<code>O(n)</code>。</p></blockquote></li><li>按序号查找结点值，找第i个结点。<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LNode *<span class="title">GetElem</span> <span class="params">(LinkList L, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> j = <span class="number">1</span>;</span><br><span class="line">  LNode *p = L-&gt;next;</span><br><span class="line">  <span class="keyword">if</span> (i == <span class="number">0</span>) <span class="keyword">return</span> L; <span class="comment">// 若i等于0，则返回头结点</span></span><br><span class="line">  <span class="keyword">if</span>(i &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">NULL</span>; <span class="comment">// 若i无效，则返回NULL</span></span><br><span class="line">  <span class="comment">// 从第1个结点开始找，查找第i个结点</span></span><br><span class="line">  <span class="keyword">while</span> (p &amp;&amp; j &lt; i) &#123;</span><br><span class="line">    p = p-&gt;next;</span><br><span class="line">    j++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 返回第i个结点的指针，如果i大于表长，此时p = NULL，直接返回ｐ即可</span></span><br><span class="line">  <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>时间复杂度为<code>O(n)</code>。</p></blockquote></li><li>按值查找表结点。从单链表第一个结点开始，由前往后依次比较表中各结点数据域的值，若某结点数据域的值等于给定值e，则返回该结点的指针；若整个单链表中没有这样的结点，则返回NULL。<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LNode *<span class="title">LocateElem</span> <span class="params">(LinkList L, ElemType e)</span> </span>&#123;</span><br><span class="line">  LNode *p = L-&gt;next;</span><br><span class="line">  <span class="keyword">while</span> (p != <span class="literal">NULL</span> &amp;&amp; p-&gt;data != e) &#123;</span><br><span class="line">    p = p-&gt;next;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 时间复杂度为O(n)</span></span><br></pre></td></tr></table></figure></li><li>循环单链表：表中最后一个结点的指针不是NULL，而改为指向头结点，从而整个链表形成一个环，其判空条件不是头结点的指针是否为空，而是它是否等于头指针。即<code>L-&gt;next == L</code>。</li><li>双链表：双链表结点中有两个指针prior和next，分别指向其前驱结点和后继结点。结点类型描述如下：<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">DNode</span> &#123;</span></span><br><span class="line">  ElemType data;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">DNode</span> *<span class="title">prior</span>, *<span class="title">next</span>;</span></span><br><span class="line">&#125; DNode, *DLinkList</span><br></pre></td></tr></table></figure></li><li>双链表的插入操作：在双链表中p所指结点之后插入结点*s。<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 核心代码</span></span><br><span class="line">s-&gt;next = p-&gt;next; <span class="comment">// 1</span></span><br><span class="line">p-&gt;next-&gt;prior = s; <span class="comment">// 2</span></span><br><span class="line">s-&gt;prior = p; <span class="comment">// 3</span></span><br><span class="line">p-&gt;next = s; <span class="comment">// 4</span></span><br></pre></td></tr></table></figure><blockquote><p>上述代码语句不是唯一的，但也不是任意的，1、2两步必须在4步之前。</p></blockquote></li><li>双链表的删除操作：删除双链表中结点p的后继结点*q。<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 核心代码</span></span><br><span class="line">p-&gt;next = q-&gt;next;</span><br><span class="line">q-&gt;next-prior = p;</span><br><span class="line"><span class="built_in">free</span>(q);</span><br></pre></td></tr></table></figure></li><li>循环双链表：表中最后一个结点的next指针指向头结点，头结点的prior指针还要指向表尾结点。判空条件：<code>L-&gt;prior == L &amp;&amp; L-&gt;next == L;</code>。</li><li>设计一个递归算法，删除不带头结点的单链表L中所有值为x的结点。<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Del_x_3</span> <span class="params">(LinkList &amp;L, ElemType x)</span> </span>&#123;</span><br><span class="line">  LNode *p; <span class="comment">// p指向待删除结点</span></span><br><span class="line">  <span class="keyword">if</span> (L == <span class="literal">NULL</span>) <span class="keyword">return</span>; <span class="comment">// 递归出口</span></span><br><span class="line">  <span class="keyword">if</span> (L-&gt;data == x) &#123;</span><br><span class="line">    p = L; <span class="comment">// 删除L，并让L指向下一结点</span></span><br><span class="line">    L = L-&gt;next;</span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">    Del_X_3(L, x); <span class="comment">// 递归调用</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    Del_X_3(L-&gt;next, x);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 时间复杂度为O(n)</span></span><br></pre></td></tr></table></figure></li><li>在带头结点的单链表L中，删除所有值为x的结点，并释放其空间，假设值为x的结点不唯一，试编写算法以实现上述操作。<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 解法一</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Del_X_1</span> <span class="params">(LinkList &amp;L, ElemType x)</span> </span>&#123;</span><br><span class="line">  LNode *p = L-&gt;next, *pre = L, *q;</span><br><span class="line">  <span class="keyword">while</span>(p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (p-&gt;data == x) &#123;</span><br><span class="line">      q = p; <span class="comment">// q指向该结点</span></span><br><span class="line">      p = p-&gt;next;</span><br><span class="line">      pre-&gt;next = p; <span class="comment">// 删除q结点</span></span><br><span class="line">      <span class="built_in">free</span>(q);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      pre = p;</span><br><span class="line">      p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="comment">// while</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解法二：才用尾插法建立单链表。用p指针扫描L的所有结点，当其值不为x时将其链接到L之后，否则将其释放。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Del_X_2</span> <span class="params">(LinkList &amp;L, ElemType x)</span> </span>&#123;</span><br><span class="line">  LNode *p = L-&gt;next, *r = L, *q; <span class="comment">// r指向尾结点，其初值为头结点</span></span><br><span class="line">  <span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (p-&gt;data != x) &#123;</span><br><span class="line">      r-&gt;next = p;</span><br><span class="line">      r = p;</span><br><span class="line">      p = p-&gt;next;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      q = p;</span><br><span class="line">      p = p-&gt;next;</span><br><span class="line">      <span class="built_in">free</span>(q);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  r-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 上述两个算法扫描一遍链表，时间复杂度为O(n)，空间复杂度为O(l)。</span></span><br></pre></td></tr></table></figure></li><li>设L为带头结点的单链表，编写算法实现从尾到头反向输出每个结点的值。<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 递归实现：每当访问一个结点时，先递归输出它后面的结点，再输出该结点自身。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">R_Print</span> <span class="params">(LinkList L)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (L-&gt;next != <span class="literal">NULL</span>) &#123;</span><br><span class="line">    R_Print (L-&gt;next);</span><br><span class="line">  &#125;</span><br><span class="line">  print(L-&gt;data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>试编写算法将带头结点的单链表就地逆置，所谓”就地”是指辅助空间复杂度为<code>O(l)</code>。<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将头结点摘下，然后从第一结点开始，</span></span><br><span class="line"><span class="comment">// 依次前插入到头结点的后面（头插法建立单链表），</span></span><br><span class="line"><span class="comment">// 直到最后一个结点为止，则实现了链表的逆置。</span></span><br><span class="line"><span class="function">LinkList <span class="title">Reverse_1</span> <span class="params">(LinkList L)</span> </span>&#123;</span><br><span class="line">  LNode *p, *r; <span class="comment">// p为工作指针，r为p的后继，以防断链</span></span><br><span class="line">  p = L-&gt;next;</span><br><span class="line">  L-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">  <span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">    r = p-&gt;next;</span><br><span class="line">    <span class="comment">// 头插法</span></span><br><span class="line">    p-&gt;next = L-&gt;next;</span><br><span class="line">    L-&gt;next = p;</span><br><span class="line">    p = r;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 时间复杂度为O(n)，空间复杂度为O(l)</span></span><br></pre></td></tr></table></figure></li><li>试编写在带头结点的单链表L中删除一个最小值结点的高效算法（假设最小值结点是唯一的）。<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LinkList <span class="title">Delete_Min</span> <span class="params">(LinkList &amp;L)</span> </span>&#123;</span><br><span class="line">  LNode *pre = L,*p = pre-&gt;next; <span class="comment">// p为工作指针，pre指向其前驱</span></span><br><span class="line">  LNode *minpre = pre, *minp = p; <span class="comment">// 保存最小值结点及其前驱</span></span><br><span class="line">  <span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (p-&gt;data &lt; minp-&gt;data) &#123;</span><br><span class="line">      minp = p;</span><br><span class="line">      minpre = pre;</span><br><span class="line">    &#125;</span><br><span class="line">    pre = p;</span><br><span class="line">    p = p-&gt;next;</span><br><span class="line">  &#125;</span><br><span class="line">  minpre-&gt;next = minp-&gt;next;</span><br><span class="line">  <span class="built_in">free</span>(minp);</span><br><span class="line">  <span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 时间复杂度为O(n)，空间复杂度为O(l)</span></span><br></pre></td></tr></table></figure></li><li>有一个带头结点的单链表L，设计一个算法使其元素递增有序。算法思想：采用<strong>直接插入排序</strong>算法的思想，先构成只含一个数据结点的有序单链表，然后依次扫描单链表中剩下的结点p直至p == NULL为止，在有序表中通过比较查找插入*p的前驱结点pre，然后将p插入到pre之后。<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Sort</span> <span class="params">(LinkList &amp;L)</span> </span>&#123;</span><br><span class="line">  LNode *p = L-&gt;next, *pre;</span><br><span class="line">  LNode *r = p-&gt;next; <span class="comment">// r保存p后继结点指针，以保证不断链</span></span><br><span class="line">  p-&gt;next = <span class="literal">NULL</span>; <span class="comment">// 构造只含一个数据结点的有序表</span></span><br><span class="line">  p = r;</span><br><span class="line">  <span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">    r = p-&gt;next; <span class="comment">// 保存p的后继结点指针</span></span><br><span class="line">    pre = L;</span><br><span class="line">    <span class="keyword">while</span> (pre-&gt;next != <span class="literal">NULL</span> &amp;&amp; pre-&gt;next-&gt;data &lt; p-&gt;data) &#123;</span><br><span class="line">      pre = pre-&gt;next; <span class="comment">// 在有序表中查找插入p的前驱结点pre</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 头插法</span></span><br><span class="line">    p-&gt;next = pre-&gt;next;</span><br><span class="line">    pre-&gt;next = p;</span><br><span class="line">    p = r; <span class="comment">// 扫描原单链表中剩下的结点</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 本算法具有稳定性，时间复杂度为O(n*n)</span></span><br></pre></td></tr></table></figure></li><li>设在一个带表头结点的单链表中所有元素结点的数据值无序，试编写一个函数，删除表中所有介于给定的两个值（作为函数参数给出）之间的元素（若存在）。<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RangeDelete</span> <span class="params">(LinkList &amp;L, <span class="keyword">int</span> min, <span class="keyword">int</span> max)</span> </span>&#123;</span><br><span class="line">  LNode *pre = L, *p = L-&gt;next; <span class="comment">// p是工作指针，pre是其前驱</span></span><br><span class="line">  <span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (p-&gt;data &gt; min &amp;&amp; p-&gt;data &lt; max) &#123;</span><br><span class="line">      pre-&gt;next = p-&gt;next;</span><br><span class="line">      <span class="built_in">free</span>(p);</span><br><span class="line">      p = pre-&gt;next;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      pre = p;</span><br><span class="line">      p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 算法思想同11的解法一，时间复杂度为O(n)</span></span><br></pre></td></tr></table></figure></li><li><strong>【求公共结点】</strong>给定两个单链表，编写算法找出两个链表的公共结点，即两个链表共同指向的结点。<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LinkList <span class="title">Search_1st_Common</span> <span class="params">(LinkList L1, LinkList L2)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> len1 = Length(L1), len2 = Length(L2); <span class="comment">// 计算两个链表的表长</span></span><br><span class="line">  LinkList longList, shortList; <span class="comment">// 分别指向表长较长和较短的链表</span></span><br><span class="line">  <span class="keyword">if</span> (len1 &gt; len2) &#123; <span class="comment">// L1较长</span></span><br><span class="line">    longList = L1-&gt;next;</span><br><span class="line">    shortList = L2-&gt;next;</span><br><span class="line">    dist = len1 - len2; <span class="comment">// 表长之差</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;              <span class="comment">// L2较长</span></span><br><span class="line">    longList = L2-&gt;next;</span><br><span class="line">    shortList = L1-&gt;next;</span><br><span class="line">    dist = len2 - len1;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> (dist--) &#123;</span><br><span class="line">    longList = longList-&gt;next;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> (longList !=<span class="literal">NULL</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (longList == shortList) &#123;</span><br><span class="line">      <span class="keyword">return</span> longList;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      longList = longList-&gt;next;</span><br><span class="line">      shortList = shortList-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 时间复杂度为O(len1+len2)</span></span><br></pre></td></tr></table></figure></li><li>给定一个带表头结点的单链表，设head为头指针，结点的结构为(data, next)，data为整形元素，next为指针，试写出算法：按递增次序输出单链表中各结点的数据元素，并释放结点所占的存储空间（要求：不允许使用数组作为辅助空间）。<br>算法思想：对链表进行遍历，在每趟遍历中查找出整个链表的最小值元素，输出并释放结点所占空间；再查找次小值元素，输出并释放空间，如此下去，直至链表为空，最后释放头结点所占存储空间，该算法的时间复杂度为<code>O(n*n)</code>。<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Min_Delete</span> <span class="params">(LinkList &amp;head)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">while</span> (head-&gt;next != <span class="literal">NULL</span>) &#123;</span><br><span class="line">    pre = head; <span class="comment">// pre指向元素最小结点的前驱结点</span></span><br><span class="line">    p = pre-&gt;next; <span class="comment">// p为工作指针</span></span><br><span class="line">    <span class="keyword">while</span> (p-&gt;next != <span class="literal">NULL</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (p-&gt;next-&gt;data &lt; pre-&gt;next-&gt;data) &#123;</span><br><span class="line">        pre = p; <span class="comment">// 记住当前最小值结点的前驱</span></span><br><span class="line">      &#125;</span><br><span class="line">      p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    print(pre-&gt;next-&gt;data); <span class="comment">// 输出最小值</span></span><br><span class="line">    u = pre-&gt;next;</span><br><span class="line">    pre-&gt;next = u-&gt;next;</span><br><span class="line">    <span class="built_in">free</span>(u);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">free</span>(head); <span class="comment">// 释放头结点</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>将一个带头结点的单链表A分解为两个带头结点的单链表A和B，使得A表中含有原表中序号为奇数的元素，而B表中含有原表中序号为偶数的元素，且保持其相对顺序不变。<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LinkList <span class="title">DisCreate_1</span> <span class="params">(LinkList &amp;A)</span> </span>&#123;</span><br><span class="line">  i = <span class="number">0</span>;</span><br><span class="line">  B = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">  B-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">  LNode *ra = A, *rb = B; <span class="comment">// ra和rb分别指向A和B的表尾结点</span></span><br><span class="line">  p = A-&gt;next; <span class="comment">// 工作指针</span></span><br><span class="line">  A-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">  <span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">    i++;</span><br><span class="line">    <span class="keyword">if</span> (i%<span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">      rb-&gt;next = p;</span><br><span class="line">      rb = p;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      ra-&gt;next = p;</span><br><span class="line">      ra = p;</span><br><span class="line">    &#125;</span><br><span class="line">    p = p-&gt;next;</span><br><span class="line">  &#125;</span><br><span class="line">  ra-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">  rb-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">  <span class="keyword">return</span> B;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>设c={a1, b1, a2, b2, …, an, bn}为线性表，采用带头结点的hc单链表存放，设计一个就地算法，将其拆分为两个线性表，使得A={a1, a2, …, an}，b={bn, …, b2, b1}。<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用尾插法建A，头插法建B</span></span><br><span class="line"><span class="function">LinkList <span class="title">DisCreate_2</span> <span class="params">(LinkList &amp;A)</span> </span>&#123;</span><br><span class="line">  LinkList B = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">  B-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">  LNode *p = A-&gt;next, *q;</span><br><span class="line">  LNode *ra = A; <span class="comment">// ra始终指向A的尾结点</span></span><br><span class="line">  <span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">    ra-&gt;next = p; ra = p;   <span class="comment">// 尾插法建A</span></span><br><span class="line">    p = p-&gt;next;</span><br><span class="line">    q = p-&gt;next;</span><br><span class="line">    <span class="comment">// 头插法建B</span></span><br><span class="line">    p-&gt;next = B-&gt;next;</span><br><span class="line">    B-&gt;next = p;</span><br><span class="line">    p = q;</span><br><span class="line">  &#125;</span><br><span class="line">  ra-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">  <span class="keyword">return</span> B;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><strong>【去重】</strong>在一个<strong>递增有序</strong>的线性表中，有数值相同的元素存在。若存储方式为单链表，设计算法去掉数值相同的元素，使表中不再有重复的元素。例如(7, 10, 10, 21, 30, 42, 42, 42, 51, 70)将变作(7, 10, 21, 30, 42, 51, 70)。<br>算法思想:由于是有序表，所有相同值域的结点都是相邻的。用p扫描递增单链表L，若p结点的值域等于其后继结点的值域，则删除后者，否则p移向下一个结点。<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Del_Same</span> <span class="params">(LinkList &amp;L)</span> </span>&#123;</span><br><span class="line">  LNode *p = L-&gt;next, *q;</span><br><span class="line">  <span class="keyword">if</span> (p == <span class="literal">NULL</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> (p-&gt;next != <span class="literal">NULL</span>) &#123;</span><br><span class="line">    q = p-&gt;next;</span><br><span class="line">    <span class="keyword">if</span> (p-&gt;data == q-&gt;data) &#123;</span><br><span class="line">      p-&gt;next = q-&gt;next;</span><br><span class="line">      <span class="built_in">free</span>(q);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 算法时间复杂度为O(n)，空间复杂度为O(l)</span></span><br></pre></td></tr></table></figure></li><li><strong>【求并集】</strong>假设有两个按元素值递增次序排列的线性表，均以单链表形式存储。请编写算法将这两个单链表归并为一个按元素值递减次序排列的单链表，并要求利用原来两个单链表的结点存放归并后的单链表。<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MergeList</span> <span class="params">(LinkList &amp;La, LinkList &amp;Lb)</span> </span>&#123;</span><br><span class="line">  LNode *r, *pa = La-&gt;next, *pb = Lb-&gt;next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><strong>【求交集】</strong>设A和B是两个单链表（带头结点），其中元素<strong>递增有序</strong>。设计一个算法从A和B的公共元素中产生单链表C，要求不破坏A、B的结点。</li><li><strong>【求交集】</strong>已知两个链表A和B分别表示两个集合，其元素<strong>递增</strong>排列。编制函数，求A与B的交集，并存放于A链表中。</li><li>两个整数序列A=a1,a2,a3,…,am和B=b1,b2,b3,…,bn已经存入两个单链表中，</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;线性表&quot;&gt;&lt;a href=&quot;#线性表&quot; class=&quot;headerlink&quot; title=&quot;线性表&quot;&gt;&lt;/a&gt;线性表&lt;/h2&gt;&lt;hr&gt;
&lt;h3 id=&quot;顺序表&quot;&gt;&lt;a href=&quot;#顺序表&quot; class=&quot;headerlink&quot; title=&quot;顺序表&quot;&gt;&lt;/a&gt;顺</summary>
      
    
    
    
    <category term="数据结构" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="线性表" scheme="http://example.com/tags/%E7%BA%BF%E6%80%A7%E8%A1%A8/"/>
    
    <category term="顺序表" scheme="http://example.com/tags/%E9%A1%BA%E5%BA%8F%E8%A1%A8/"/>
    
    <category term="数组" scheme="http://example.com/tags/%E6%95%B0%E7%BB%84/"/>
    
    <category term="链表" scheme="http://example.com/tags/%E9%93%BE%E8%A1%A8/"/>
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>react+typescript 高仿ant design 开发UI组件库</title>
    <link href="http://example.com/2021/09/16/react/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB%E7%9B%B8%E5%85%B3/"/>
    <id>http://example.com/2021/09/16/react/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB%E7%9B%B8%E5%85%B3/</id>
    <published>2021-09-15T16:00:00.000Z</published>
    <updated>2021-09-21T14:54:16.569Z</updated>
    
    <content type="html"><![CDATA[<h2 id="react-typescript-高仿ant-design-开发UI组件库"><a href="#react-typescript-高仿ant-design-开发UI组件库" class="headerlink" title="react+typescript 高仿ant design 开发UI组件库"></a>react+typescript 高仿ant design 开发UI组件库</h2><hr><h3 id="安装sass"><a href="#安装sass" class="headerlink" title="安装sass"></a>安装sass</h3><ol><li>Sass 是一款强化 CSS 的辅助工具，是一种css的预编译语言，它在 CSS 语法的基础上增加了变量 (variables)、嵌套 (nested rules)、混合 (mixins)、导入 (inline imports) 等高级功能。Sass 能够帮助复杂的样式表更有条理， 并且易于在项目内部或跨项目共享设计。</li><li>通过<code>npm install -g sass</code>安装到项目里，编译运行的时候会报错：<code>Cannot find module &#39;sass&#39;</code>。</li><li>解决办法：使用dart-sass。</li><li>安装命令：<code>npm install node-sass@npm:dart-sass</code></li><li>全局的一些变量、依赖、可重用性、扩展性。</li><li>varibles.scss(各种变量以及可配置设置) mixins.scss(全局mixins) function.scss(全局 functions)。</li><li>creat-react-app天生不支持sass预处理器的，需要安装依赖：<code>npm install node-sass --save</code>。</li><li>变量使用$ ：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$blue: #0d6efd !default;</span><br><span class="line">$primary: $blue !default;</span><br></pre></td></tr></table></figure></li><li>在添加样式到应用中，在不同浏览器下，有些元素缺少一致性，比如margin、padding等属性的默认值不太统一。</li><li>解决方法：安装normalize.css，其作用就是一般化大部分浏览器的默认样式。</li><li>插入文件：@import命令插入外部文件 .scss和css都可。</li><li>刚刚启动项目时又遇到了一个问题，babel-loader版本不匹配：create-react-app创建项目的时候所用到的babel-loader依赖是8.1.0版本的，但是在我所创建项目的node-modules下的版本是8.2.2的版本，所以我要把版本降级才可以启动项目。</li><li>解决方案：直接安装babel-loader的8.1.0版本，安装命令：<code>npm install babel-loader@8.1.0</code>.</li></ol><hr><h3 id="button组件需求分析"><a href="#button组件需求分析" class="headerlink" title="button组件需求分析"></a>button组件需求分析</h3><ol><li>type：不同类型的button，比如primary、default、danger、link button(链接按钮)</li><li>size：不同的尺寸的button，比如normal、small、large</li><li>禁用状态：disabled</li><li>如何支持按钮的原生api，比如链接的href属性，children(按钮文字)等。</li><li>给btn添加不同的className，假如是默认的就是btn，给不同的type和size添加不同的className，手动拼接很多的className会很麻烦，这里采用一个非常流行的小工具：classnames。</li><li>安装命令：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install classnames --save</span><br><span class="line">npm install @types/classnames --save</span><br></pre></td></tr></table></figure></li><li>button不同的size就是padding、border、radius不一样，实质上就是修改这几个属性而已，此时代码重用就可以用上sass的mixin，</li><li>sass的内置函数，比如：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">link-color: $primary !default;</span><br><span class="line">$link-hover-color: darken($link-color, 15%) !default // 基于$link-color变暗15%</span><br></pre></td></tr></table></figure></li></ol><hr><h3 id="测试工具-testing-library"><a href="#测试工具-testing-library" class="headerlink" title="测试工具 testing-library"></a>测试工具 testing-library</h3><ol><li>安装：<code>npm install --save-dev @testing-library/react</code>.</li><li>运行命令：<code>npm run test</code>.</li><li>安装jest-dom工具：<code>npm install --save-dev @test-library/jest-dom</code>.(最新版本会自带，不用安装)</li></ol><hr><h3 id="menu组件"><a href="#menu组件" class="headerlink" title="menu组件"></a>menu组件</h3><ol><li>React.Children提供了用于处理this.props.children不透明数据结构的实用方法，如果Children为不合规则的数据类型，map会完美的跳过这些类型，避免出现错误。</li><li>displayName为react内置属性</li><li>cloneElement()</li></ol><h4 id="父组件使用useContext向子组件传递数据-常用于【祖组件】与【后代组件】间通信"><a href="#父组件使用useContext向子组件传递数据-常用于【祖组件】与【后代组件】间通信" class="headerlink" title="父组件使用useContext向子组件传递数据-常用于【祖组件】与【后代组件】间通信"></a>父组件使用useContext向子组件传递数据-常用于【祖组件】与【后代组件】间通信</h4><ol><li>父组件中 <code>menu.tsx</code><ul><li>引入<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState, createContext &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br></pre></td></tr></table></figure></li><li>声明要传递参数的类型<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ts字符串字面量</span></span><br><span class="line"><span class="keyword">type</span> selectCallback = <span class="function">(<span class="params">selectedIndex: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">void</span></span><br><span class="line"><span class="keyword">interface</span> IMenuContext &#123;</span><br><span class="line">  <span class="attr">passedIndex</span>: <span class="built_in">number</span>;</span><br><span class="line">  passedOnSelect?: selectCallback;</span><br><span class="line">  mode?: MenuMode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>给要传过去的参数赋值(放在一个对象里面)<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 要传给子组件的数据</span></span><br><span class="line"><span class="keyword">const</span> passedContext: IMenuContext = &#123;</span><br><span class="line">  <span class="attr">passedIndex</span>: currentActive ? currentActive : <span class="number">0</span>,</span><br><span class="line">  <span class="attr">passedOnSelect</span>: handleClick,</span><br><span class="line">  <span class="attr">mode</span>: mode</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>使用<code>MenuContext.Provider</code>传值<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> (</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">className</span>=<span class="string">&#123;classes&#125;</span> <span class="attr">style</span>=<span class="string">&#123;style&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">MenuContext.Provider</span> <span class="attr">value</span>=<span class="string">&#123;passedContext&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      &#123;renderChildren()&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">MenuContext.Provider</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li>导出<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> MenuContext = createContext&lt;IMenuContext&gt;(&#123;<span class="attr">passedIndex</span>: <span class="number">0</span>&#125;)</span><br></pre></td></tr></table></figure></li></ul></li><li>子组件中 <code>menuItem.tsx</code><ul><li>引入<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; createContext, useContext &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; MenuContext &#125; <span class="keyword">from</span> <span class="string">&#x27;./menu&#x27;</span></span><br></pre></td></tr></table></figure></li><li>利用<code>useContext</code>取出并存入一个变量中<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> context = useContext(MenuContext)</span><br></pre></td></tr></table></figure></li><li>使用时用点号即可<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">context.passedIndex</span><br><span class="line">context.passedOnSelect(index)</span><br></pre></td></tr></table></figure></li></ul></li></ol><hr><h3 id="图标Icon"><a href="#图标Icon" class="headerlink" title="图标Icon"></a>图标Icon</h3><ol><li>安装react-fontawesome：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm i --save @fortawesome/fontawesome-svg-core</span><br><span class="line">npm i --save @fortawesome/free-solid-svg-icons</span><br><span class="line">npm i --save @fortawesome/react-fontawesome</span><br></pre></td></tr></table></figure></li></ol><hr><h3 id="storybook-本地调试组件和生成文档页面的利器"><a href="#storybook-本地调试组件和生成文档页面的利器" class="headerlink" title="storybook-本地调试组件和生成文档页面的利器"></a>storybook-本地调试组件和生成文档页面的利器</h3><ol><li>目前开发组件库痛点：展示和调试功能使用的是create-react-app入口文件(App.tsx)不适合管理组件库，并且缺少行为追踪和属性调试功能。</li><li>组件完美开发工具应有的特点：<ul><li>分开展示各个组件不同属性下的状态。</li><li>能追踪组件的行为并且具有属性调试功能。</li><li>可以为组件自动生成文档和属性列表。</li></ul></li><li>安装：<br><code>npx -p @storybook/cli sb init</code></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;react-typescript-高仿ant-design-开发UI组件库&quot;&gt;&lt;a href=&quot;#react-typescript-高仿ant-design-开发UI组件库&quot; class=&quot;headerlink&quot; title=&quot;react+typescript 高</summary>
      
    
    
    
    <category term="react" scheme="http://example.com/categories/react/"/>
    
    
    <category term="react" scheme="http://example.com/tags/react/"/>
    
    <category term="sass" scheme="http://example.com/tags/sass/"/>
    
  </entry>
  
  <entry>
    <title>vue父子组件通信</title>
    <link href="http://example.com/2021/09/06/vue/vue%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1/"/>
    <id>http://example.com/2021/09/06/vue/vue%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1/</id>
    <published>2021-09-06T06:08:30.000Z</published>
    <updated>2021-09-06T07:40:59.952Z</updated>
    
    <content type="html"><![CDATA[<h3 id="祖先传子通信方式"><a href="#祖先传子通信方式" class="headerlink" title="祖先传子通信方式"></a>祖先传子通信方式</h3><ol><li>父组件 APP.vue<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">todo-header</span> <span class="attr">ref</span>=<span class="string">&quot;header&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//在mounted生命周期里执行异步代码</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">//给&lt;TodoHeader/&gt;绑定addTodo事件监听</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">//this.$on(&#x27;addTodo&#x27;,this.addTodo) 此时第一个this指向APP实例，所以不对</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.$refs.header.$on(<span class="string">&quot;addTodo&quot;</span>, <span class="built_in">this</span>.addTodo); <span class="comment">//括号内为事件名和回调函数</span></span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">  &#125;;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>子组件 TodoHeader.vue 接收<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">addItem</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//触发自定义事件：addTodo</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.$emit(<span class="string">&quot;addTodo&quot;</span>, todo);</span></span><br><span class="line"><span class="javascript">      &#125;,</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">  &#125;;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="消息订阅与发布-—适用于各种组件间传值，以父子组件传值为例"><a href="#消息订阅与发布-—适用于各种组件间传值，以父子组件传值为例" class="headerlink" title="消息订阅与发布 —适用于各种组件间传值，以父子组件传值为例"></a>消息订阅与发布 —适用于各种组件间传值，以父子组件传值为例</h3><ol><li>下载 pubsub.js 库<ul><li>npm install —save-js 查看信息：npm info pubsub-js</li></ul></li><li>父组件 App.vue 订阅消息—绑定事件监听<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> PubSub <span class="keyword">from</span> <span class="string">&quot;pubsub-js&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">//订阅消息 参数为消息名和回调函数</span></span></span><br><span class="line"><span class="javascript">      PubSub.subscribe(<span class="string">&quot;deleteTodo&quot;</span>, <span class="function">(<span class="params">msg, index</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.deleteTodo(index);</span></span><br><span class="line"><span class="javascript">      &#125;);</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">  &#125;;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>子组件 TodoItem.vue 发布消息==触发事件<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> PubSub <span class="keyword">from</span> <span class="string">&#x27;pubsub=js&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">deleteItem</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> &#123;todo, index, deleteTodo&#125; = <span class="built_in">this</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">if</span>(<span class="built_in">window</span>.confirm(<span class="string">`确认删除<span class="subst">$&#123;todo.title&#125;</span>吗？`</span>)) &#123;</span></span><br><span class="line"><span class="javascript"><span class="comment">//发布消息 参数为消息名和要传递的数据</span></span></span><br><span class="line"><span class="javascript">PubSub.publish(<span class="string">&#x27;deleteTodo&#x27;</span>, index);</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="子传父的通信方式-emit"><a href="#子传父的通信方式-emit" class="headerlink" title="子传父的通信方式 $emit"></a>子传父的通信方式 $emit</h3><ol><li>这里以子组件直接给父组件传递自己 data 里的数据为例。</li><li>父组件 子组件标签名为 son-comp<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--通过事件绑定把这个方法传递给子组件--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">son-comp</span> @<span class="attr">func</span>=<span class="string">&quot;getMsgFromSon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">son-comp</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="javascript">  SonComp,</span></span><br><span class="line"><span class="javascript">  &#125;,</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="attr">msgFromSon</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript">  <span class="comment">/**定义一个接受子组件数据的方法，先把这个方法传给子组件，当子组件调用这个方法时，</span></span></span><br><span class="line"><span class="comment"><span class="javascript">   * 就可以通过参数data传递他自己想传给父组件的数据</span></span></span><br><span class="line"><span class="comment"><span class="javascript">   */</span></span></span><br><span class="line"><span class="javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">getMsgFromSon</span>(<span class="params">data</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="built_in">this</span>.msgFromSon = data;</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>子组件 SonComp.vue<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;向父组件传递消息&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;sendMsg&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">msg</span>: <span class="string">&quot;要传递给父组件的数据&quot;</span>,</span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">sendMsg</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.$emit(<span class="string">&quot;func&quot;</span>, <span class="built_in">this</span>.msg);</span></span><br><span class="line"><span class="javascript">      &#125;,</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">  &#125;;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;祖先传子通信方式&quot;&gt;&lt;a href=&quot;#祖先传子通信方式&quot; class=&quot;headerlink&quot; title=&quot;祖先传子通信方式&quot;&gt;&lt;/a&gt;祖先传子通信方式&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;父组件 APP.vue&lt;figure class=&quot;highlight html</summary>
      
    
    
    
    <category term="vue" scheme="http://example.com/categories/vue/"/>
    
    
    <category term="组件通信" scheme="http://example.com/tags/%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1/"/>
    
    <category term="vue" scheme="http://example.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>react父子组件通信</title>
    <link href="http://example.com/2021/09/01/react/react%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1/"/>
    <id>http://example.com/2021/09/01/react/react%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1/</id>
    <published>2021-09-01T09:52:30.000Z</published>
    <updated>2021-09-06T06:13:51.773Z</updated>
    
    <content type="html"><![CDATA[<h2 id="react父子组件通信方式"><a href="#react父子组件通信方式" class="headerlink" title="react父子组件通信方式"></a>react父子组件通信方式</h2><h3 id="子组件向父组件传参"><a href="#子组件向父组件传参" class="headerlink" title="子组件向父组件传参"></a>子组件向父组件传参</h3><h4 id="场景一"><a href="#场景一" class="headerlink" title="场景一"></a>场景一</h4><ol><li>业务场景：父页面进行多选课程，并能选择分类，不同分类下展示相应的可选课程，点击请选择分类跳转至子页面进行分类级联选择。</li><li>交互功能：<ul><li>当子页面选择好想选的分类时，点击确定按钮将这个分类的唯一id及分类名称传递给父页面。另外，父页面收到分类id时需要将这个id作为请求接口函数的参数触发请求。</li><li>级联分类选择需要保存历史选择记录，例如假设一共有三层，选到第二层时，返回到父页面，此时再跳转到子页面时还要显示之前选择过的状态。</li><li>综上：子页面中，点击头部导航栏的返回按钮向父页面传递保留选择历史的level（树形结构的子集）；当点击确定按钮时，向父页面传递最后选中的分类名称和分类id，以及level（点击确定按钮后也会跳转到父页面，故也要把level传过去）。</li></ul></li><li>解决方案：<br> <strong>父页面中</strong><ul><li>假设父页面为AddMicrolecture.tsx，子页面为courseClassify.tsx，父页面的子组件标签为<code>&lt;CourseClassify/&gt;</code>。</li><li>首先在父页面定义两个函数，其中一个如下，第二个函数直接定义在子组件标签中。<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 接受两个参数，第一个参数data表示要接受的分类id，</span></span><br><span class="line"><span class="comment">// 第二个参数表示保存的历史选择数据，这两个参数都需要子组件传递过来.</span></span><br><span class="line"><span class="keyword">const</span> callBackFun = <span class="function">(<span class="params">data: <span class="built_in">any</span>, level: <span class="built_in">any</span>[]</span>) =&gt;</span> &#123;</span><br><span class="line">  setShowClassify(<span class="literal">false</span>); <span class="comment">// 子组件调用这个函数时跳转到父页面，设置为false</span></span><br><span class="line">  getData(<span class="string">&#x27;&#x27;</span>, <span class="literal">true</span>, <span class="number">1</span>, data);</span><br><span class="line">  setCategory(level) <span class="comment">// 保存这个level，再传给子组件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>把这个两个函数传递给子组件，由子组件调用执行。<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;CourseClassify</span><br><span class="line">  <span class="comment">// 参数data表示分类名称，需要子组件调用这个函数然后将参数传递过来</span></span><br><span class="line">  categoryName=&#123;<span class="function">(<span class="params">data: <span class="built_in">string</span></span>) =&gt;</span> &#123; setCategoryName(data); &#125;&#125;</span><br><span class="line">  callBackFun=&#123;<span class="function">(<span class="params">data?: <span class="built_in">string</span>, level?: <span class="built_in">any</span>[]</span>) =&gt;</span> callBackFun(data, level)&#125;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><strong>子页面中</strong></li><li>子组件中声明函数类型：<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> IProps &#123;</span><br><span class="line">  <span class="attr">categoryName</span>: <span class="function">(<span class="params">data: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">void</span></span><br><span class="line">  <span class="attr">callBackFun</span>: <span class="function">(<span class="params">data?: <span class="built_in">string</span>, level?: <span class="built_in">any</span>[]</span>) =&gt;</span> <span class="built_in">void</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>点击确定按钮调用confirm方法，在这个方法中调用父组件中传过来的两个函数。<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> confirm = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (isConfirm) &#123;</span><br><span class="line">    <span class="keyword">const</span> categoryId = level[level.length - <span class="number">1</span>].id;</span><br><span class="line">    <span class="keyword">const</span> categoryName = level[level.length - <span class="number">1</span>].name;</span><br><span class="line">    <span class="comment">// 调用父组件传过来的函数，并执行</span></span><br><span class="line">    props.categoryName(categoryName);</span><br><span class="line">    props.callBackFun(categoryId, level);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>点击导航栏返回按钮，只要把level传过去并执行父组件的callBackFun函数。<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Navbar title=<span class="string">&quot;请选择课程分类&quot;</span> onLeftClick=&#123;<span class="function">() =&gt;</span> props.callBackFun(<span class="string">&#x27;&#x27;</span>,level)&#125;&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="父组件向子组件传参"><a href="#父组件向子组件传参" class="headerlink" title="父组件向子组件传参"></a>父组件向子组件传参</h3><h4 id="场景一：传递简单数据。"><a href="#场景一：传递简单数据。" class="headerlink" title="场景一：传递简单数据。"></a>场景一：传递简单数据。</h4><ol><li>父页面中：把category传过去<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;CourseClassify</span><br><span class="line">  category=&#123;category&#125;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure></li><li>子页面中接收：<ul><li>首先在子组件中声明数据类型。<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> IProps &#123;</span><br><span class="line">  <span class="attr">category</span>: <span class="built_in">any</span>[]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>然后通过<code>props.category</code>使用。</li></ul></li></ol><h4 id="场景二：传递函数。"><a href="#场景二：传递函数。" class="headerlink" title="场景二：传递函数。"></a>场景二：传递函数。</h4><ol><li>业务说明：子页面进行添加或删除操作后，父组件要展示一条有修改信息的提醒。</li><li>解决方案：只需要在子组件的确认删除处和确认添加处做好标记，然后把标记传递给父组件。</li><li>父页面index.tsx，子组件标签为<code>&lt;MaterialList/&gt;</code><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [isDeleteIfo, setIsDeleteInfo] = useState(<span class="literal">false</span>) <span class="comment">// 为true时，即表示信息被修改。</span></span><br><span class="line"></span><br><span class="line">&lt;MaterialList</span><br><span class="line">  bookIsChange=&#123;<span class="function">() =&gt;</span> &#123; setIsDeleteInfo(<span class="literal">true</span>) &#125;&#125;</span><br><span class="line">  /&gt;</span><br></pre></td></tr></table></figure></li><li>子组件中：<ul><li>声明：<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> IProps &#123;</span><br><span class="line">  <span class="attr">bookIsChange</span>: <span class="built_in">any</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>确认删除：<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">delete</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  props.bookIsChange();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;react父子组件通信方式&quot;&gt;&lt;a href=&quot;#react父子组件通信方式&quot; class=&quot;headerlink&quot; title=&quot;react父子组件通信方式&quot;&gt;&lt;/a&gt;react父子组件通信方式&lt;/h2&gt;&lt;h3 id=&quot;子组件向父组件传参&quot;&gt;&lt;a href=&quot;#</summary>
      
    
    
    
    <category term="react" scheme="http://example.com/categories/react/"/>
    
    
    <category term="react" scheme="http://example.com/tags/react/"/>
    
    <category term="组件通信" scheme="http://example.com/tags/%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>函数和类型推断</title>
    <link href="http://example.com/2021/08/29/typescript/%E5%87%BD%E6%95%B0%E5%92%8C%E7%B1%BB%E5%9E%8B%E6%8E%A8%E6%96%AD/"/>
    <id>http://example.com/2021/08/29/typescript/%E5%87%BD%E6%95%B0%E5%92%8C%E7%B1%BB%E5%9E%8B%E6%8E%A8%E6%96%AD/</id>
    <published>2021-08-29T03:30:12.000Z</published>
    <updated>2021-08-31T11:56:36.256Z</updated>
    
    <content type="html"><![CDATA[<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="函数声明"><a href="#函数声明" class="headerlink" title="函数声明"></a>函数声明</h3><ol><li>定义一个有两个参数的函数，参数类型为number，返回值类型为number。<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>):  <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>将以上函数赋值给变量result，result会自动解析为number类型。<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> result = add(<span class="number">2</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure></li></ol><h3 id="函数的可选参数"><a href="#函数的可选参数" class="headerlink" title="函数的可选参数"></a>函数的可选参数</h3><ol><li>实现可选参数：在变量后加上一个?，表示该参数可选。<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span>, z?: <span class="built_in">number</span></span>):  <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> z === <span class="string">&#x27;number&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> x + y + z;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>正确示例：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> result = add(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">let</span> result = add(<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>);</span><br></pre></td></tr></table></figure></blockquote></li><li>可选参数之后不能再加上一个确定参数，可选参数只能放在最后面。  <blockquote><p>错误示例：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x: <span class="built_in">number</span>, z?: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>):  <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li><li>给函数参数添加默认值，ts会将已添加默认值的参数识别为可选参数。<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span>, z: <span class="built_in">number</span> = <span class="number">10</span></span>):  <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> z === <span class="string">&#x27;number&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> x + y + z;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="给函数声明类型"><a href="#给函数声明类型" class="headerlink" title="给函数声明类型"></a>给函数声明类型</h3><ol><li>函数表达式<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> add = <span class="function"><span class="keyword">function</span> (<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span>, z: <span class="built_in">number</span> = <span class="number">10</span></span>):  <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> z === <span class="string">&#x27;number&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> x + y + z;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>给函数声明类型，其后的箭头函数跟上一个类型，表示函数返回的类型。<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> add2: <span class="function">(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span>: z?: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span> = add</span><br></pre></td></tr></table></figure></li><li>假设函数返回为空，不返回。<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> add2: <span class="function">(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span>: z?: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">void</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="类型推断"><a href="#类型推断" class="headerlink" title="类型推断"></a>类型推断</h2><ol><li>假设将一个没有声明类型的变量赋值字符串，那么这个变量就是string类型。<br>示例：<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;str&#x27;</span>; <span class="comment">// 此时str已经为string类型了</span></span><br><span class="line">str = <span class="number">123</span>; <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;函数&quot;&gt;&lt;a href=&quot;#函数&quot; class=&quot;headerlink&quot; title=&quot;函数&quot;&gt;&lt;/a&gt;函数&lt;/h2&gt;&lt;h3 id=&quot;函数声明&quot;&gt;&lt;a href=&quot;#函数声明&quot; class=&quot;headerlink&quot; title=&quot;函数声明&quot;&gt;&lt;/a&gt;函数声明&lt;/h</summary>
      
    
    
    
    <category term="typescript" scheme="http://example.com/categories/typescript/"/>
    
    
    <category term="typescript" scheme="http://example.com/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>test-hexo</title>
    <link href="http://example.com/2021/08/01/test-hexo/"/>
    <id>http://example.com/2021/08/01/test-hexo/</id>
    <published>2021-07-31T20:12:21.000Z</published>
    <updated>2021-09-16T06:29:56.220Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2021/08/01/hello-world/"/>
    <id>http://example.com/2021/08/01/hello-world/</id>
    <published>2021-07-31T19:14:21.589Z</published>
    <updated>2021-08-29T02:57:01.379Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><blockquote><p>搭建博客的详细教程 <a href="https://www.zhihu.com/question/20962496/answer/1882882782?utm_campaign=shareopn&amp;utm_content=group3_Answer&amp;utm_medium=social&amp;utm_oi=813766955784876032&amp;utm_source=wechat_session&amp;s_r=0" title="手把手教">请戳</a></p></blockquote><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
